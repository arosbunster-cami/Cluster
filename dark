{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "import astropy.io.fits as pyfits\n",
    "import numpy\n",
    "import pylab\n",
    "import itertools\n",
    "from scipy import stats\n",
    "from scipy import ndimage\n",
    "import operator\n",
    "import time\n",
    "import datetime\n",
    "import pickle\n",
    "import IPython\n",
    "from astropy.io import fits\n",
    "from astropy.io import fits\n",
    "from glob import glob\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Directorio del cual trabajaré"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Volumes/Cami/Observacion13enero/dark'"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "direc_dark = str('/Volumes/Cami/Observacion13enero/dark')\n",
    "os.chdir(direc_dark)\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Haciendo la prueba con una imagen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: fsr_1214_01_c4.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU     107   (2048, 2048)   int16 (rescales to float32)   \n"
     ]
    }
   ],
   "source": [
    "archivo_fits = fits.open('fsr_1214_01_c4.fits') # abre la imagen \n",
    "archivo_fits.info()                             #me entrega información de la imagen "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dark'"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archivo_fits[0].header['Object']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Me entrega el encabezado de la imagen, es decir, toda la información que se necesita para poder hacer los cruces "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "header = fits.getheader(\"fsr_1214_01_c4.fits\")\n",
    "#header"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Queremos hacer una lista que contengan solo los dark "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "Images_dark=glob(\"/Volumes/Cami/Observacion13enero/dark/*.fits\")\n",
    "nombre = []\n",
    "archivo_fits=[]\n",
    "\n",
    "for archivo in Images_dark:\n",
    "    archivo_fits = fits.open(archivo,\"readonly\",memmap=False) #leer un archivo FITS\n",
    "    if (archivo_fits['PRIMARY'].header['OBSTYPE'] =='dark'):\n",
    "        nombre.append(archivo_fits)\n",
    "#nombre['PRIMARY'].header['FILE']\n",
    "    #print(archivo_fits['PRIMARY'].header['OBSTYPE'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: /Volumes/Cami/Observacion13enero/dark/fsr_1214_01_c4.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU     107   (2048, 2048)   int16 (rescales to float32)   \n"
     ]
    }
   ],
   "source": [
    "archivo_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "este nuevo for es para crear una lista con los nombres de cada imagen "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "only_dark=[]\n",
    "for i in range(len(nombre)):\n",
    "    only_dark.append(nombre[i]['PRIMARY'].header['FILE'])\n",
    "#only_dark"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se toma la mediana de todos los datos del archivo que contiene solo los dark, y con esto nos da solo una imagen "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "media  = []\n",
    "nombre1 = []\n",
    "archivo_fits_media = []\n",
    "\n",
    "for archivo in Images_dark:\n",
    "    archivo_fits_media = fits.open(archivo,\"readonly\",memmap=False) #leer un archivo FITS\n",
    "    \n",
    "    #Utilizando el metodo .append insertamos la media de los datos.\n",
    "    media.append(np.nanmean(archivo_fits_media['PRIMARY'].data))\n",
    "    archivo_fits_media.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(archivo_fits_media)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
